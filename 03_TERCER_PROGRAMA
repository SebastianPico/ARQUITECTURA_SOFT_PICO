class Orden:
    def __init__(self, id_orden: str, nombre_servicio: str, cantidad: float, valor_unitario: float):
        self.id_orden = id_orden
        self.nombre_servicio = nombre_servicio
        self.cantidad = cantidad
        self.valor_unitario = valor_unitario

    def calcular_total(self) -> float:
        return self.cantidad * self.valor_unitario

    def __str__(self):
        return f"{self.nombre_servicio} (ID: {self.id_orden}) - {self.cantidad} x {self.valor_unitario}"


class Factura:
    def __init__(self, numero: str, cliente: str, direccion: str):
        self.numero = numero
        self.cliente = cliente
        self.direccion = direccion
        self.ordenes: list[Orden] = []

    def adicionar_orden(self, id_orden: str, nombre_servicio: str, cantidad: float, valor_unitario: float):
        orden = Orden(id_orden, nombre_servicio, cantidad, valor_unitario)
        self.ordenes.append(orden)

    def calcular_factura_total(self) -> float:
        return sum(ord.calcular_total() for ord in self.ordenes)


def main():
    factura = Factura("F001", "Cliente Genérico", "Calle 123")

    try:
        numero_ordenes = int(input("Digite el número de órdenes: "))
    except ValueError:
        print("Entrada inválida. Debe ingresar un número entero.")
        return

    for _ in range(numero_ordenes):
        id_orden = input("Digite el ID de la orden: ")
        nombre_servicio = input("Digite el nombre del servicio: ")

        try:
            cantidad = float(input("Digite la cantidad: "))
            valor_unitario = float(input("Digite el valor unitario: "))
        except ValueError:
            print("Entrada inválida. Cantidad y valor deben ser numéricos.")
            continue

        factura.adicionar_orden(id_orden, nombre_servicio, cantidad, valor_unitario)

    total = factura.calcular_factura_total()
    print(f"\nEl valor total de la factura es: {total:.2f}")

    print("\nÓrdenes registradas:")
    for orden in factura.ordenes:
        print(" -", orden)


if __name__ == "__main__":
    main()
